# Generated by Django 4.2.24 on 2025-10-21 08:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('decision_type', models.CharField(choices=[('precedence', 'Train Precedence'), ('platform_assignment', 'Platform Assignment'), ('delay_recovery', 'Delay Recovery'), ('route_optimization', 'Route Optimization'), ('conflict_resolution', 'Conflict Resolution')], max_length=50)),
                ('priority', models.CharField(choices=[('high', 'High Priority'), ('medium', 'Medium Priority'), ('low', 'Low Priority')], default='medium', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('modified', 'Modified'), ('overridden', 'Overridden'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('trains_involved', models.JSONField(default=list, help_text='List of train IDs involved')),
                ('tracks_involved', models.JSONField(default=list, help_text='List of track IDs involved')),
                ('stations_involved', models.JSONField(default=list, help_text='List of station codes involved')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deadline', models.DateTimeField(blank=True, help_text='Decision deadline', null=True)),
                ('time_remaining', models.IntegerField(blank=True, help_text='Minutes remaining to decide', null=True)),
                ('decided_at', models.DateTimeField(blank=True, null=True)),
                ('context_data', models.JSONField(default=dict, help_text='Additional context for the decision')),
                ('assigned_controller', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('decided_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='decisions_made', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'decisions',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DecisionAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decision_time_seconds', models.IntegerField(blank=True, help_text='Time taken to make decision', null=True)),
                ('recommendation_accuracy', models.FloatField(blank=True, help_text='How accurate was the AI recommendation', null=True)),
                ('actual_delay_impact', models.FloatField(blank=True, null=True)),
                ('actual_energy_impact', models.FloatField(blank=True, null=True)),
                ('actual_passengers_affected', models.IntegerField(blank=True, null=True)),
                ('actual_throughput_impact', models.FloatField(blank=True, null=True)),
                ('system_load_at_decision', models.FloatField(blank=True, help_text='System load percentage', null=True)),
                ('network_delays_during_decision', models.JSONField(default=list, help_text='Network delays during decision period')),
                ('controller_satisfaction_score', models.IntegerField(blank=True, help_text='1-5 satisfaction score', null=True)),
                ('controller_feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('decision', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='decision_engine.decision')),
            ],
            options={
                'db_table': 'decision_analytics',
            },
        ),
        migrations.CreateModel(
            name='DecisionAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('accept', 'Accept Recommendation'), ('modify', 'Modify Recommendation'), ('override', 'Override Recommendation')], max_length=20)),
                ('action_at', models.DateTimeField(auto_now_add=True)),
                ('modified_recommendation', models.TextField(blank=True, null=True)),
                ('override_reason', models.TextField(blank=True, null=True)),
                ('custom_parameters', models.JSONField(default=dict, help_text='Custom parameters for modified recommendation')),
                ('actual_delay_impact', models.FloatField(blank=True, help_text='Actual delay impact in minutes', null=True)),
                ('actual_energy_impact', models.FloatField(blank=True, help_text='Actual energy impact percentage', null=True)),
                ('action_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('decision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='decision_engine.decision')),
            ],
            options={
                'db_table': 'decision_actions',
                'ordering': ['-action_at'],
            },
        ),
        migrations.CreateModel(
            name='ConflictDetection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conflict_type', models.CharField(choices=[('train_precedence', 'Train Precedence Conflict'), ('platform_clash', 'Platform Assignment Clash'), ('track_capacity', 'Track Capacity Exceeded'), ('timing_conflict', 'Schedule Timing Conflict'), ('resource_shortage', 'Resource Shortage')], max_length=30)),
                ('severity', models.CharField(choices=[('high', 'High Priority'), ('medium', 'Medium Priority'), ('low', 'Low Priority')], max_length=20)),
                ('trains_involved', models.JSONField(default=list)),
                ('tracks_involved', models.JSONField(default=list)),
                ('stations_involved', models.JSONField(default=list)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('conflict_time', models.DateTimeField(help_text='When the conflict will occur')),
                ('resolution_deadline', models.DateTimeField(blank=True, null=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('conflict_details', models.JSONField(default=dict)),
                ('potential_impact', models.TextField(help_text='Description of potential impact if not resolved')),
                ('resolution_decision', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='decision_engine.decision')),
            ],
            options={
                'db_table': 'conflict_detections',
                'ordering': ['-severity', 'conflict_time'],
            },
        ),
        migrations.CreateModel(
            name='AIRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_text', models.TextField(help_text='Main recommendation text')),
                ('confidence_score', models.FloatField(help_text='AI confidence percentage (0-100)')),
                ('reasoning_points', models.JSONField(default=list, help_text='List of reasoning points')),
                ('delay_reduction_min', models.FloatField(blank=True, help_text='Expected delay reduction in minutes', null=True)),
                ('energy_saving_percent', models.FloatField(blank=True, help_text='Expected energy saving percentage', null=True)),
                ('passengers_affected', models.IntegerField(blank=True, help_text='Number of passengers affected', null=True)),
                ('throughput_improvement_percent', models.FloatField(blank=True, help_text='Throughput improvement percentage', null=True)),
                ('model_version', models.CharField(blank=True, max_length=50, null=True)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('alternative_options', models.JSONField(default=list, help_text='List of alternative recommendations')),
                ('decision', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendation', to='decision_engine.decision')),
            ],
            options={
                'db_table': 'ai_recommendations',
            },
        ),
    ]
